@using ITVComponents.WebCoreToolkit.Net.Extensions
@using ITVComponents.WebCoreToolkit.Net.TelerikUi.Extensions
@using Kendo.Mvc.UI
@using TaskSchedulerWeb.Areas.ScheduledTasks.Controllers
@{
    Layout = "_Layout";
}
@{
    ViewBag.Title = "Plugins";
}
<link rel="stylesheet" type="text/css" href="@("/_content/PeriodicTasks.WebExtensions/css/TaskWidgets.css".ExtendUrlWithVersion())" />
<script src="@("/_content/PeriodicTasks.WebExtensions/js/ViewScripts/ServicePlugins_Index.js".ExtendUrlWithVersion())"></script>

<h2>Konfigurierte Plugins</h2>
@using (Html.BeginForm())
{
    @(Html.Kendo().Grid<ServicePluginsController.ServicePluginViewModel>()
        .Name("GridPlugins")
        .Navigatable()
        .Editable(editing => editing.Mode(GridEditMode.InLine))
        .ColumnMenu()
        .Resizable(r => r.Columns(true))
        .Scrollable(s => s.Height("auto"))
        .Events(e => e.DataBound("ITVenture.Pages.TaskScheduler.ServicePlugins.initReordering"))
        .ToolBar(toolbar =>
        {
            toolbar.RefreshTable();
            toolbar.Create().Text("add Plugin");
            toolbar.Custom().HtmlAttributes(new { onclick = "ITVenture.Pages.TaskScheduler.ServicePlugins.toggleReordering(event)" }).Text("Enable Reorder");

        })
        .DataSource(binding => binding.Ajax()
            .Read(r => r.Action("GetData", "ServicePlugins"))
            .Update(r => r.Action("UpdateData", "ServicePlugins"))
            .Create(r => r.Action("InsertData", "ServicePlugins"))
            .Destroy(r => r.Action("DeleteData", "ServicePlugins"))
            .Events(e => e.Error("ITVenture.Pages.TaskScheduler.ServicePlugins.error_handler").RequestEnd("ITVenture.Pages.TaskScheduler.ServicePlugins.rebind"))
            .Model(m =>
            {
                m.Id(f => f.PluginId);


            }).Sort(s => s.Add(o => o.LoadOrder).Ascending()))
        .Columns(cols =>
        {
            cols.Command(cmd => cmd.Custom("a").HtmlAttributes(new { @class = "sort-dragger" })).Width(50);
            cols.Bound(c => c.PluginId).Hidden();
            cols.Bound(c => c.UniqueName).Width(250);
            cols.Bound(c => c.Constructor);
            //cols.Bound(c => c.LoadOrder);
            cols.Bound(c => c.Disabled).Width(100);
            cols.Bound(c => c.DisabledReason);
            cols.Command(cmd =>
            {
                cmd.Edit().HtmlAttributes(new { title = "edit" });
                cmd.PopupConfirmDelete();
            }).Width(100);
        }))
    <div class="panel-wrap">
        <div>
            <div id="plugAnalyzer" class="widgetbox">
                <h3>Plugin Analyzer <span class="k-icon k-i-arrow-chevron-down"></span></h3>
                <div style="display:none">
                    <i>Assembly Beschreiben: </i>@Html.TextBox("AssemblyBox")<a class="k-button k-button-icontext" href="#" title="Abrufen" onclick="ITVenture.Pages.TaskScheduler.ServicePlugins.renderAssemblyInfo($('#AssemblyBox').val());"><span class="fad fa-eye"></span>&nbsp;Abrufen</a>
                    <div id="PluginDetailInfo" />
                </div>
            </div>
        </div>
    </div>
}